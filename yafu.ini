% This file is parsed by yafu during startup to apply 
% options that impact various algorithms.

% NOTE:
% Command line options that have an argument
% WILL OVERRIDE anything specfied here.


% Use this file to specify commonly used options and/or as
% documentation on the available options.  



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% General options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Run all multi-threaded algorithms with specified thread count
% threads=1

% the number of Rabin-Miller witnesses to use during PRP checks
% nprp=1

% Turn verbosity to level 1.  Default level is 0.
% Note that more v's increase the verbosity (v's on separate lines)
% v

% Turn verbosity completely off
% silent

% add a one-line terse summary of the complete factorization to the screen output
terse

% sets the number base in which output factors are printed (default is base 10)
% valid settings are 2,8,10,16
% obase=16

% skip testing the clock speed for 100 ms during startup
% no_clk_test

% Run the script located in the given filename
% script="my_script_file"

% specify a session logfile.  The session logfile records
% commands run, the session random seeds, System/Build info
% and some startup options
% session="session.log"

% Run the given command on numbers inside the given filename
% batchfile="my_batch_file"

% use the following random seed for this session
% seed=42

% print verbose processor info during startup
% vproc

% use the given logfile to record factorization info
% logfile="factor.log"

% set yafu to idle priority
% p

% repeat the given expression/command N times
% repeat=1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Factor options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% before running NFS, do ECM work up to (pretest_ratio * input_size) digits
% pretest_ratio=0.25

% set a GNFS/SIQS crossover, in decimal digits.  Note that setting a value here
% will override tune()'s crossover.
% xover=97

% set a SNFS/SIQS crossover, in decimal digits
% snfs_xover=105

% set a (ECM) pretesting plan, e.g., plan=light.  
% The following are the valid options and their ratios:
% light (2/9)
% deep (1/3)
% normal (4/13)
% none (0)
% custom (pretest_ratio)
plan=normal

% only pretest (rho, p-1, ecm) the inputs (i.e., no NFS or SIQS), optionally up to a maximum depth
% pretest

% specify an amount of ECM work that has already been performed on an input
% work=25

% specify the name of a file where primes that are found during factor() are recorded
% op="pfile.dat"

% specify the name of a file where factors that are found during factor() are recorded
% of="factored.dat"

% specify the name of a file where unfactored residues remaining after factor() are output
% ou="unfactored.dat"

% perform no ECM on the input
% noecm

% stop after finding one factor of any size
% one

% stop on finding one factor with size conditions, the 
% base to use to evaluate the size (default is base 10)
% and whether or not the factor found must be prime
% stople=20
% stoplt=20
% stopeq=20
% stopgt=20
% stopge=20
% stopbase=10
% stopprime

% stop on finding a specific number of factors
% stopk=3

% do not start SIQS or NFS on composites above this size.  
% -1 means no limit (the default).
% max_siqs=90
% max_nfs=100

% set the decimal digit threshold below which numbers
% are proved prime using APR-CL
aprcl_p=500

% set the decimal digit threshold above which numbers  
% proved prime using APR-CL have additional verbosity enabled
aprcl_d=200

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% QS options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% use the double-large-prime variation
% forceDLP

% use the triple-large-prime variation.  Note that other parameters
% may not be optimized for TLP if this is selected
% forceTLP

% the large prime bound used in siqs with 1,2, or 3 large primes, specified in bits
% siqsLPB

% residues smaller than pmax^siqsMFBD are considered for DLP factoring, where 
% pmax is the largest factor base prime
% siqsMFBD

% residues smaller than pmax^siqsMFBT are considered for TLP factoring, where 
% pmax is the largest factor base prime
% siqsMFBT

% When using batch factoring of TLP residues, sets the largest prime to use
% in the batch GCD, as a divisor of the max factor base prime.  (Larger divisors
% use fewer primes in the GCD.)
% siqsBDiv=3

% When using batch factoring of TLP residues, sets the batch size.  Larger batches
% take longer to process, but are more efficient in factoring residues.
% siqsBT=1000000

% Sets the small prime variation threshold
% siqsTFSm=18

% Specify the siqs save file name
% qssave="siqs.dat"

% Sets the size of the factor base (number of primes to use)
% siqsB

% Sets the trial factoring cutoff - sieve locations greater than this size,
% in bits, are reported to the trial factoring routines
% siqsTF

% Stop siqs after finding siqsR relations
% siqsR

% Stop siqs after siqsT seconds
% siqsT

% Sets the number of sieve blocks (per side)
% siqsNB

% Sets the large prime bound as a multiplier of the maximum factor base prime
% siqsM

% Do no perform optimization of the small prime variation threshold
% noopt

% Set a threshold below which siqs will not use a savefile (all relations are
% processed in-memory)
inmem=70

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NFS options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% run experimental cado-nfs+msieve NFS
% cadoMsieve

% relative or absolute path to a directory containing CADO-NFS files
% note: it is necessary to add / or \ to the end of the path
cado_dir=/home/nyancat/Tools/cado-nfs/

% specify a path to the convert_poly executable file
% you can build it by running "make convert_poly" under the CADO-NFS directory
% it will be under build/*/misc/convert_poly(.exe)
convert_poly_path=/home/nyancat/Tools/cado-nfs/build/NyanCatCBLFS.mpi/misc/convert_poly

% relative or absolute path to a directory containing ggnfs-lasieve4I* executables.
% without these yafu will not use NFS
% paths to windows binaries that should have been provided with yafu
% ggnfs_dir=factor\lasieve5_64\bin\mingw\avx512\
% ggnfs_dir=factor\lasieve5_64\bin\mingw\
% paths to static linux binaries that should have been provided with yafu
ggnfs_dir=factor/lasieve5_64/bin/avx512/
% ggnfs_dir=../../../factor/lasieve5_64/bin

% a threshold, in bits, above which polyselect will run test sieves every time it
% finds a new best polynomial in order to estimate total sieving time
poly_testsieve=390

% a maximum time to spend in poly select, as a percentage of estimated sieving time.
% use with the poly_testsieve option to stop polyselect when time spent in polyselect
% compared to estimated sieving time is larger than this percentage 
poly_percent_max=8

% file containing nfs comma-delimited parameters, assumes algebraic-side sieving.
% supercedes the built-in nfs sieving parameters, so only use this if you are
% sure they are better than what is built in.  Note that if YAFU decides a
% NFS job should be sieved on the rational side, it will swap the a- and r-side
% parameters in the file
% nfs_params=ggnfs_params_table.txt


% a percentage of new relations to gather if a filtering attempt fails 
% to produce a matrix
% filt_bump=5

% run only the 1st stage of post-processing (filtering)
% nc1

% run only the 2nd stage of post-processing (matrix build, and matrix solve).
% NOTE this is will start a matrix solve from scratch!  to resume, use -ncr
% nc2

% run only the third stage of post-processing (square root)
% nc3 

% resume a matrix solve
% ncr

% force the use of gnfs (as opposed to snfs)
% gnfs

% use the specified ggnfs-lasieve4I solver (e.g., 11, 12, ... 15)
% siever

% use the specified number of threads when matrix solving (can be 
% different from the general "threads" options)
% lathreads

% run only the sieving step, optionally with a comma-delimited start and 
% stop value for the special-q
% ns

% run only the poly search step, optionally with a comma-delimited start and 
% stop value for the leading coefficient
% np

% run only the post-processing stages (1 through 3)
% nc

% set a poly search methology ('deep', 'wide', 'fast', 'min', 'avg', or 'good')
% deep: all threads search the same leading coefficent
% wide: search N times the number of leading coefficents with N threads
% fast: split a search range amongst N threads
% min: stop when a polynomial of minimum quality is found (according to a heuristic)
% avg: stop when a polynomial of average quality is found (according to a heuristic)
% good: stop when a polynomial of good quality is found (according to a heuristic)
psearch=avg

% restart a NFS job (when there is an existing nfs.dat file, regardless of input)
% R

% set a batch size for each threads when searching polynomial leading coefficients
% pbatch=250

% Stop NFS after ggnfsT seconds
% ggnfsT

% use algebraic-side lattice sieving
% a

% use rational-side lattice sieving
% r

% input job file for NFS
% job

% output file name for gnfs sieving
% o


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ECM options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set the B1 level for ECM.
B1ecm=11000

% Set the B2 level for ECM.  
% Only needed if you want something other than the default
% for the current B1.
% B2ecm=1100000

% specify a path to an ECM executable file
%ecm_path=..\..\..\..\gmp-ecm\bin\x64\Release\ecm.exe
%ecm_path=..\..\..\..\ecm_install\mingw\bin\ecm.exe
ecm_path=../ecm-install/bin/ecm
%ecm_path=../trosi_ecm_git/ecm

% Use this to use gmp-ecm instead of avx-ecm when avx-ecm available
% prefer_gmpecm

% Use this to use gmp-ecm stage 2 instead of avx-ecm when avx-ecm available
% prefer_gmpecm_stg2

% output the stage 1 residues of avx-ecm
% saveB1

% crossover to use the external ECM executable over the internally linked
% ECM (or avx-ecm)
ext_ecm=1000000000

% specify a particular curve using sigma.  For avx-ecm, this specifies the
% starting sigma for the first vector position.  Other lanes increment this value.
% sigma

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% P-1 options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set the B1 level for P-1.
% B1pm1=100000

% Set the B2 level for P-1.  
% Only needed if you want something other than the default
% for the current B1.
% B2pm1=10000000

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% P+1 options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set the B1 level for P+1.
B1pp1=20000

% Set the B2 level for P+1.  
% Only needed if you want something other than the default
% for the current B1.
% B2pp1=2000000

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Brent-Pollard Rho options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rhomax=200

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Fermat options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% fmtmax=1000000

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Eratosthenes options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% output primes found to the file "primes.dat"
% pfile

% output primes found to the screen
% pscreen

% use the specified block size in the sieve
% soe_block

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Tune options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% If you run tune(), some information about the results should
% appear below here


tune_info=Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz,LINUX64,1.59078e-05,0.196092,0.299688,0.0999245,102.36,42
tune_info=Intel(R) Xeon(R) Gold 6254 CPU @ 3.10GHz,LINUX64,4.1495e-06,0.206457,0.0313896,0.115034,97.6916,2.03547e-07,0.0125802,0.0022736,42
tune_info=Intel(R) Xeon(R) Gold 6248 CPU @ 2.50GHz,LINUX64,1.61863e-05,0.190237,0.0430548,0.111798,100.537,42
tune_info=AMD EPYC 9174F 16-Core Processor               ,LINUX64,4.44807e-06,0.203069,0.0257548,0.113557,96.7904,1.10534e-07,0.00304708,0.00236159,42
